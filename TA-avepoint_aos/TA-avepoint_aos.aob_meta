{"basic_builder": {"appname": "TA-avepoint_aos", "friendly_name": "AvePoint Online Service Add-on", "version": "1.0.0", "author": "CCX: Managed Security Services - Capability", "description": "Built using AvePoint Online Service Build Guide December 2023.", "theme": "#65A637", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAxJJREFUWEftmIlOIlEQRQtxQVwQcEk0uIAC//81gIioEeK+ICBqYHIqU+QJCE0PcYjxJSa2TXfduksVMSBTdgJThkemG1Aul+v8D8ay2WyXmE8M/QL6K8fPZmhxcVE6nY7MzMzIx8eHvL29jW1D3wwFg0FJpVLSarWk0WhILBaTWq0mlUpFQezs7Mjy8rLc3d0JQPkpFovSbreHgvQNaG1tTZ6enpQRLwfWlpaWFPSw4xvQ4eGhnJycKKBAICBbW1sSiUS6tWDi+vpaQXMAdHBwoM9MDBAyraysyPr6utLP2dvbk3q9Lre3t311AAoIgL28vOh9ZL6/v5fHx8eB7I7FUDqdluPjY30xzGQyGcnn83p9dHSkRj49PdXr7e1tCYfDUiqVVCr8VK1WlSnY4/P2LreTsQDBxtnZWReAvXB+fl4BJhIJBcAxsMiIbDDLMQ/t7+9LuVzuY3UsQBsbG3Jzc6PdEmmLtRdAVEY+Y5BUIl3vGQuQde1KFY1GBUC8HIaen5+1RjweVzmJf7PZ1Pt4inQ+PDx8ktuXZMwRijNnNjc31agwhpm9RH93d1fOz88FHxYKBQUP26+vr59I8sxQKBTShzHlwsKCdg1AuvVyMDnNGCCewewk1BdDJIaJTPRnZ2d1QgMOoPx92HE/x/yykYHRewelZ4bwCRJdXl7qALSBZ50PA+Qyaf5DQsbA+/u7P4bcKCeTyb54DwPkpguT05QbDF+S8RATGhO7rHw1T9wiVhymbEJ/5T/PklGAZFxcXGgt6xpvMXl702KA8BwSE3uXKXfI+maIhJgh8RSmJLr4AWPTPeuDMzc3pykCDNPd0gVAGsDc/7w67CsEc4itTcLY8rZOXAbN+CQSzzF7jFm+I5GuQfNrLMlcatnarAG6BQiFkY3kcGAPr11dXSlzMAOTtjq+CoFvQINMabuOYqurq901wjVrA5C2WiYOiAL4gDlCEcDwu217ZMJHrBjA4Tn8N2rN+GZoUId4CmnwGvL1Dj0vK2aigLwUHPWZX0A/h6FRnXzH/en+/9B3MDCqxh9YRC5DRODzCQAAAABJRU5ErkJggg==", "visible": true, "tab_version": "4.1.4", "tab_build_no": "0", "build_no": 2}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "aos:audit", "interval": "300", "use_external_validation": true, "streaming_mode_xml": true, "name": "aos_audit", "title": "AOS_Audit", "description": "", "type": "customized", "parameters": [{"name": "client_id", "label": "Client ID", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "1b71d184-4930-4077-b958-775faf33d5c2"}, {"name": "client_secret", "label": "Client Secret", "help_string": "", "required": true, "format_type": "password", "default_value": "", "placeholder": "", "type": "password", "value": "RNUp+YrXCVDtISAW3CnoCrYhLwwVp7sT4nrbT7ddoX4="}, {"name": "identity_services_url", "label": "Identity Services Url", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "https://identity.avepointonlineservices.com"}, {"name": "web_api_url", "label": "Web API Url", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "https://graph-au.avepointonlineservices.com/aos"}], "data_inputs_options": [{"type": "customized_var", "name": "client_id", "title": "Client ID", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "client_secret", "title": "Client Secret", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "identity_services_url", "title": "Identity Services Url", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "web_api_url", "title": "Web API Url", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "# encoding = utf-8\r\n\r\nimport os\r\nimport sys\r\nimport time\r\nimport datetime\r\nimport urllib.parse\r\nimport json\r\nfrom datetime import datetime, timedelta\r\nfrom dateutil.parser import parse as dp\r\nfrom dateutil.tz import UTC\r\n\r\n'''\r\n    IMPORTANT\r\n    Edit only the validate_input and collect_events functions.\r\n    Do not edit any other part in this file.\r\n    This file is generated only once when creating the modular input.\r\n'''\r\n'''\r\n# For advanced users, if you want to create single instance mod input, uncomment this method.\r\ndef use_single_instance_mode():\r\n    return True\r\n'''\r\n\r\ndef validate_input(helper, definition):\r\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\r\n    # This example accesses the modular input variable\r\n    # client_id = definition.parameters.get('client_id', None)\r\n    # client_secret = definition.parameters.get('client_secret', None)\r\n    pass\r\n\r\ndef collect_events(helper, ew):\r\n    # \"\"\"Implement your data collection logic here\r\n\r\n    # The following examples get the arguments of this input.\r\n    # Note, for single instance mod input, args will be returned as a dict.\r\n    # For multi instance mod input, args will be returned as a single value.\r\n    opt_client_id = helper.get_arg('client_id')\r\n    opt_client_secret = helper.get_arg('client_secret')\r\n    opt_identity_services_url = helper.get_arg('identity_services_url')\r\n    opt_web_api_url = helper.get_arg('web_api_url')\r\n\r\n    # In single instance mode, to get arguments of a particular input, use\r\n    # opt_client_id = helper.get_arg('client_id', stanza_name)\r\n    # opt_client_secret = helper.get_arg('client_secret', stanza_name)\r\n    # opt_identity_services_url = helper.get_arg('identity_services_url', stanza_name)\r\n    # opt_web_api_url = helper.get_arg('web_api_url', stanza_name)\r\n\r\n    # get input type\r\n    helper.get_input_type()\r\n\r\n    # The following examples get input stanzas.\r\n    # get all detailed input stanzas\r\n    # helper.get_input_stanza()\r\n    # get specific input stanza with stanza name\r\n    # helper.get_input_stanza(stanza_name)\r\n    # get all stanza names\r\n    # helper.get_input_stanza_names()\r\n\r\n    # The following examples get options from setup page configuration.\r\n    # get the loglevel from the setup page\r\n    # loglevel = helper.get_log_level()\r\n    # get proxy setting configuration\r\n    # proxy_settings = helper.get_proxy()\r\n    # get account credentials as dictionary\r\n    # account = helper.get_user_credential_by_username(\"username\")\r\n    # account = helper.get_user_credential_by_id(\"account id\")\r\n    # get global variable configuration\r\n    # global_userdefined_global_var = helper.get_global_setting(\"userdefined_global_var\")\r\n\r\n    # The following examples show usage of logging related helper functions.\r\n    # write to the log for this modular input using configured global log level or INFO as default\r\n    # helper.log(\"log message\")\r\n    # write to the log using specified log level\r\n    # helper.log_debug(\"log message\")\r\n    # helper.log_info(\"log message\")\r\n    # helper.log_warning(\"log message\")\r\n    # helper.log_error(\"log message\")\r\n    # helper.log_critical(\"log message\")\r\n    # set the log level for this modular input\r\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\r\n    # helper.set_log_level(\"debug\")\r\n\r\n    # The following examples send rest requests to some endpoint.\r\n    verifyHTTPS = False\r\n    \r\n    url = f\"{opt_identity_services_url}/connect/token\"\r\n    method = 'Post'\r\n    payload = { \r\n        \"client_id\": opt_client_id,\r\n        \"client_secret\": opt_client_secret,\r\n        \"scope\": \"audit.read.all\",\r\n        \"grant_type\" : \"client_credentials\"\r\n    }\r\n    headers = {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\" \r\n    }\r\n\r\n    response = helper.send_http_request(\r\n        url, \r\n        method, \r\n        parameters=None, \r\n        payload=urllib.parse.urlencode(payload),\r\n        headers=headers, \r\n        cookies=None, \r\n        verify=verifyHTTPS, \r\n        cert=None,\r\n        timeout=60, \r\n        use_proxy=True)\r\n\r\n    # helper.log_debug(response.text)\r\n    \r\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\r\n    response.raise_for_status()\r\n    access_token = response.json()[\"access_token\"]\r\n\r\n    # helper.delete_check_point('lastEventTimeInSeconds')\r\n    lastEventTimeInSecondsFromCache = helper.get_check_point('lastEventTimeInSeconds')\r\n    helper.log_info(f\"The last event: {str(lastEventTimeInSecondsFromCache)}\")\r\n\r\n    # Please note: The audit logs of some products are written with delay, so a buffer of at least 5 minutes needs to be reserved here.\r\n    end_time = datetime.utcnow() - timedelta(minutes=5)\r\n    end_time = end_time.replace(tzinfo=UTC)\r\n\r\n    if lastEventTimeInSecondsFromCache is None:\r\n        start_time = end_time - timedelta(days=7)\r\n    else:\r\n        start_time = dp(lastEventTimeInSecondsFromCache)\r\n\r\n        if (end_time - timedelta(days=7)) > start_time:\r\n            start_time = end_time - timedelta(days=7)\r\n\r\n    helper.log_info(f\"Start time: {start_time.isoformat()}, End time: {end_time.isoformat()}\")\r\n\r\n    url = f'{opt_web_api_url}/audit'\r\n    method = 'Get'\r\n    parameters = {\r\n        \"startTime\": start_time.isoformat(),\r\n        \"endTime\": end_time.isoformat()\r\n    }\r\n    headers = {\"Authorization\": \"Bearer \" + access_token }\r\n\r\n    while True:\r\n        response = helper.send_http_request(\r\n            url, \r\n            method, \r\n            parameters=parameters, \r\n            payload=None,\r\n            headers=headers, \r\n            cookies=None, \r\n            verify=verifyHTTPS, \r\n            cert=None,\r\n            timeout=300, \r\n            use_proxy=True)\r\n        \r\n        helper.log_debug(response.text)\r\n        \r\n        response.raise_for_status()\r\n        \r\n        # get the response headers\r\n        # r_headers = response.headers\r\n        # get the response body as text\r\n        # r_text = response.text\r\n        # get response body as json. If the body text is not a json string, raise a ValueError\r\n        r_json = response.json()\r\n        helper.log_debug(r_json['data'])\r\n        \r\n        for d in r_json['data']:\r\n            realData = json.dumps(d)\r\n            event = helper.new_event(\r\n                time=dp(d[\"actionTime\"]).timestamp(), \r\n                source=helper.get_input_type(), \r\n                index=helper.get_output_index(), \r\n                sourcetype=helper.get_sourcetype(), \r\n                data=realData,\r\n                done=True, \r\n                unbroken=True)\r\n            helper.log_debug(realData)\r\n            ew.write_event(event)\r\n\r\n        if r_json['nextLink'] is None:\r\n            helper.log_debug(\"No next link\")\r\n            break\r\n        else:\r\n            url = r_json['nextLink']\r\n            parameters = None\r\n            helper.log_debug(f\"Next link is {url}\")\r\n\r\n    helper.save_check_point('lastEventTimeInSeconds', end_time.isoformat())\r\n    helper.log_debug(f\"Update lastEventTimeInSeconds to {end_time.isoformat()}\")\r\n\r\n    # get response cookies\r\n    # r_cookies = response.cookies\r\n    # get redirect history\r\n    # historical_responses = response.history\r\n    # get response status code\r\n    # r_status = response.status_code\r\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\r\n    # response.raise_for_status()\r\n\r\n    # The following examples show usage of check pointing related helper functions.\r\n    # save checkpoint\r\n    # helper.save_check_point(key, state)\r\n    # delete checkpoint\r\n    # helper.delete_check_point(key)\r\n    # get checkpoint\r\n    # state = helper.get_check_point(key)\r\n\r\n    # To create a splunk event\r\n    # helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\r\n    # \"\"\"\r\n\r\n    # '''\r\n    # The following example writes a random number as an event. (Multi Instance Mode)\r\n    # Use this code template by default.\r\n    # import random\r\n    # data = str(random.randint(0,100))\r\n    # event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\r\n    # ew.write_event(event)\r\n    # '''\r\n\r\n    # '''\r\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\r\n    # For advanced users, if you want to create single instance mod input, please use this code template.\r\n    # Also, you need to uncomment use_single_instance_mode() above.\r\n    # import random\r\n    # input_type = helper.get_input_type()\r\n    # for stanza_name in helper.get_input_stanza_names():\r\n    #     data = str(random.randint(0,100))\r\n    #     event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\r\n    #     ew.write_event(event)\r\n    # '''\r\n", "customized_options": [{"name": "client_id", "value": "1b71d184-4930-4077-b958-775faf33d5c2"}, {"name": "identity_services_url", "value": "https://identity.avepointonlineservices.com"}, {"name": "web_api_url", "value": "https://graph-au.avepointonlineservices.com/aos"}], "uuid": "90d2295d7b56446b889a615de910fad0", "sample_count": "42376"}]}, "field_extraction_builder": {"aos:audit": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {}}}, "sourcetype_builder": {"aos:audit": {"metadata": {"event_count": 0, "data_input_name": "aos_audit", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1706575600_37", "progress": 1.0}}